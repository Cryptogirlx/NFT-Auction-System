/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Auction {
  export type BidStruct = {
    auctionID: BigNumberish;
    bidder: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BidStructOutput = [BigNumber, string, BigNumber, BigNumber] & {
    auctionID: BigNumber;
    bidder: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };

  export type AuctionStruct = {
    nftOwner: string;
    nftContract: string;
    tokenID: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    reservePrice: BigNumberish;
    isActive: boolean;
  };

  export type AuctionStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    nftOwner: string;
    nftContract: string;
    tokenID: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    reservePrice: BigNumber;
    isActive: boolean;
  };
}

export interface AuctionInterface extends utils.Interface {
  contractName: "Auction";
  functions: {
    "DAOWallet()": FunctionFragment;
    "USDC()": FunctionFragment;
    "auctionCount()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bid((uint256,address,uint256,uint256))": FunctionFragment;
    "bidderRefundBalance(address)": FunctionFragment;
    "bids(uint256,address)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "claimFunds(uint256,address)": FunctionFragment;
    "claimNFT(uint256,address)": FunctionFragment;
    "claimableSellerFunds(address)": FunctionFragment;
    "claimed(uint256)": FunctionFragment;
    "createAuction((address,address,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "getAuctionDetails(uint256)": FunctionFragment;
    "getBidDetails(uint256,address)": FunctionFragment;
    "getBidderRefundBalance(address)": FunctionFragment;
    "getClaimableSellerFunds(address)": FunctionFragment;
    "getHighestBidder(uint256)": FunctionFragment;
    "isAuctionActive(uint256)": FunctionFragment;
    "moveFundsOutOfContract(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDAOWalletAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAOWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [Auction.BidStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bidderRefundBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNFT",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableSellerFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [Auction.AuctionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidDetails",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderRefundBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableSellerFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveFundsOutOfContract",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DAOWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidderRefundBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableSellerFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidderRefundBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableSellerFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveFundsOutOfContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAOWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCancelled(uint256)": EventFragment;
    "AuctionCreated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "BidPlaced(uint256,uint256)": EventFragment;
    "BidderRefundClaimed(address,uint256)": EventFragment;
    "DAOWalletAddressSet(address)": EventFragment;
    "NFTClaimedByOwner(uint256,address,uint256)": EventFragment;
    "NFTClaimedByWinner(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SellerFundsClaimed(address,uint256)": EventFragment;
    "TreasuryAddressSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidderRefundClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DAOWalletAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTClaimedByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTClaimedByWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerFundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAddressSet"): EventFragment;
}

export type AuctionCancelledEvent = TypedEvent<
  [BigNumber],
  { auctionID: BigNumber }
>;

export type AuctionCancelledEventFilter =
  TypedEventFilter<AuctionCancelledEvent>;

export type AuctionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    owner: string;
    startTime: BigNumber;
    endTime: BigNumber;
    tokenID: BigNumber;
    reservePrice: BigNumber;
  }
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export type BidPlacedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { auctionId: BigNumber; amount: BigNumber }
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export type BidderRefundClaimedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type BidderRefundClaimedEventFilter =
  TypedEventFilter<BidderRefundClaimedEvent>;

export type DAOWalletAddressSetEvent = TypedEvent<
  [string],
  { walletAddress: string }
>;

export type DAOWalletAddressSetEventFilter =
  TypedEventFilter<DAOWalletAddressSetEvent>;

export type NFTClaimedByOwnerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { auctionID: BigNumber; recipient: string; tokenID: BigNumber }
>;

export type NFTClaimedByOwnerEventFilter =
  TypedEventFilter<NFTClaimedByOwnerEvent>;

export type NFTClaimedByWinnerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { auctionID: BigNumber; recipient: string; tokenID: BigNumber }
>;

export type NFTClaimedByWinnerEventFilter =
  TypedEventFilter<NFTClaimedByWinnerEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SellerFundsClaimedEvent = TypedEvent<
  [string, BigNumber],
  { recepient: string; amount: BigNumber }
>;

export type SellerFundsClaimedEventFilter =
  TypedEventFilter<SellerFundsClaimedEvent>;

export type TreasuryAddressSetEvent = TypedEvent<
  [string],
  { treasury: string }
>;

export type TreasuryAddressSetEventFilter =
  TypedEventFilter<TreasuryAddressSetEvent>;

export interface Auction extends BaseContract {
  contractName: "Auction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAOWallet(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    auctionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        nftOwner: string;
        nftContract: string;
        tokenID: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
        isActive: boolean;
      }
    >;

    bid(
      _bid: Auction.BidStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bidderRefundBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        auctionID: BigNumber;
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    cancelAuction(
      auctionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNFT(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableSellerFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    createAuction(
      _auction: Auction.AuctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionDetails(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Auction.AuctionStructOutput]>;

    getBidDetails(
      auctionID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[Auction.BidStructOutput]>;

    getBidderRefundBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableSellerFunds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHighestBidder(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuctionActive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    moveFundsOutOfContract(
      to: string,
      amount: BigNumberish,
      depositToAave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDAOWalletAddress(
      _DAOWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  DAOWallet(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      nftOwner: string;
      nftContract: string;
      tokenID: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      reservePrice: BigNumber;
      isActive: boolean;
    }
  >;

  bid(
    _bid: Auction.BidStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bidderRefundBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bids(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      auctionID: BigNumber;
      bidder: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  cancelAuction(
    auctionID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    auctionID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNFT(
    auctionID: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableSellerFunds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  createAuction(
    _auction: Auction.AuctionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionDetails(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Auction.AuctionStructOutput>;

  getBidDetails(
    auctionID: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<Auction.BidStructOutput>;

  getBidderRefundBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableSellerFunds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHighestBidder(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuctionActive(
    auctionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  moveFundsOutOfContract(
    to: string,
    amount: BigNumberish,
    depositToAave: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDAOWalletAddress(
    _DAOWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DAOWallet(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        nftOwner: string;
        nftContract: string;
        tokenID: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        reservePrice: BigNumber;
        isActive: boolean;
      }
    >;

    bid(_bid: Auction.BidStruct, overrides?: CallOverrides): Promise<void>;

    bidderRefundBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        auctionID: BigNumber;
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    cancelAuction(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFunds(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNFT(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableSellerFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    createAuction(
      _auction: Auction.AuctionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDetails(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Auction.AuctionStructOutput>;

    getBidDetails(
      auctionID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<Auction.BidStructOutput>;

    getBidderRefundBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableSellerFunds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestBidder(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuctionActive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    moveFundsOutOfContract(
      to: string,
      amount: BigNumberish,
      depositToAave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDAOWalletAddress(
      _DAOWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuctionCancelled(uint256)"(auctionID?: null): AuctionCancelledEventFilter;
    AuctionCancelled(auctionID?: null): AuctionCancelledEventFilter;

    "AuctionCreated(address,uint256,uint256,uint256,uint256)"(
      owner?: null,
      startTime?: null,
      endTime?: null,
      tokenID?: null,
      reservePrice?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      owner?: null,
      startTime?: null,
      endTime?: null,
      tokenID?: null,
      reservePrice?: null
    ): AuctionCreatedEventFilter;

    "BidPlaced(uint256,uint256)"(
      auctionId?: null,
      amount?: null
    ): BidPlacedEventFilter;
    BidPlaced(auctionId?: null, amount?: null): BidPlacedEventFilter;

    "BidderRefundClaimed(address,uint256)"(
      recipient?: null,
      amount?: null
    ): BidderRefundClaimedEventFilter;
    BidderRefundClaimed(
      recipient?: null,
      amount?: null
    ): BidderRefundClaimedEventFilter;

    "DAOWalletAddressSet(address)"(
      walletAddress?: null
    ): DAOWalletAddressSetEventFilter;
    DAOWalletAddressSet(walletAddress?: null): DAOWalletAddressSetEventFilter;

    "NFTClaimedByOwner(uint256,address,uint256)"(
      auctionID?: null,
      recipient?: null,
      tokenID?: null
    ): NFTClaimedByOwnerEventFilter;
    NFTClaimedByOwner(
      auctionID?: null,
      recipient?: null,
      tokenID?: null
    ): NFTClaimedByOwnerEventFilter;

    "NFTClaimedByWinner(uint256,address,uint256)"(
      auctionID?: null,
      recipient?: null,
      tokenID?: null
    ): NFTClaimedByWinnerEventFilter;
    NFTClaimedByWinner(
      auctionID?: null,
      recipient?: null,
      tokenID?: null
    ): NFTClaimedByWinnerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SellerFundsClaimed(address,uint256)"(
      recepient?: null,
      amount?: null
    ): SellerFundsClaimedEventFilter;
    SellerFundsClaimed(
      recepient?: null,
      amount?: null
    ): SellerFundsClaimedEventFilter;

    "TreasuryAddressSet(address)"(
      treasury?: null
    ): TreasuryAddressSetEventFilter;
    TreasuryAddressSet(treasury?: null): TreasuryAddressSetEventFilter;
  };

  estimateGas: {
    DAOWallet(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _bid: Auction.BidStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bidderRefundBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      auctionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNFT(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableSellerFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createAuction(
      _auction: Auction.AuctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionDetails(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidDetails(
      auctionID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidderRefundBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableSellerFunds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestBidder(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctionActive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveFundsOutOfContract(
      to: string,
      amount: BigNumberish,
      depositToAave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDAOWalletAddress(
      _DAOWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAOWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _bid: Auction.BidStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bidderRefundBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNFT(
      auctionID: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableSellerFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      _auction: Auction.AuctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionDetails(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidDetails(
      auctionID: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidderRefundBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableSellerFunds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighestBidder(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionActive(
      auctionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveFundsOutOfContract(
      to: string,
      amount: BigNumberish,
      depositToAave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDAOWalletAddress(
      _DAOWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
